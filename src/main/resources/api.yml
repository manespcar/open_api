openapi: 3.0.0
info:
  description: Open API Demo
  version: 1.0.0
  title: Open API Demo
servers:
  - url: https://localhost:8081
paths:
  /user:
    get:
      summary: Find a collection of users
      operationId: getUsers
      responses:
        200:
          description: Retrieve users
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/User'
        400:
          description: BadRequest
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Error'
        503:
          description: Service unavailable
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/User'
        400:
          description: BadRequest
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Error'
        503:
          description: Service unavailable
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Error'
  /user/{id}:
    get:
      summary: Find user by id
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: UserID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Retrieve user
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/User'
        400:
          description: BadRequest
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Error'
        401:
          description: NotFound
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Error'
        503:
          description: Service unavailable
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an exists user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: UserID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Updated
        400:
          description: BadRequest
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Error'
        401:
          description: NotFound
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Error'
        503:
          description: Service unavailable
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete user by id
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          description: UserID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: User deleted
        400:
          description: BadRequest
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Error'
        401:
          description: NotFound
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Error'
        503:
          description: Service unavailable
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Error'
components:
  schemas:
    User:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        address:
          type: string
        phone:
          type: string
        postalCode:
          type: string
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int64
        message:
          type: string
